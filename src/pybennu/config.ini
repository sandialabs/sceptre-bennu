##############################################################################
[power-solver-service]
solver-type      = Dummy
server-endpoint  = tcp://127.0.0.1:5555
publish-endpoint = udp://239.0.0.1:40000
objects-file     = objects.txt
debug            = True

[power-groundtruth-monitor]
publish-endpoint  = udp://239.0.0.1:40000
elasticsearch-ip  = 127.0.0.1

[sel-ams-writer]
serial-port      = /dev/ttyUSB1
gryffin-endpoint = 172.16.254.254
channels         = [5, 1]
subscriber-tags  = [/system/bus-8163, /system/branch-1_8163-8164]
scales           = [1.864, 0.0569]
output-mappings  = None

[sel-ams-reader]
serial-port      = /dev/tty/USB1
gryffin-endpoint = 172.16.254.254
input-mappings   = [/system/branch-1_8163-8164/active]

; [power-solver-service]
; solver-type         = RTDS
; debug               = False
; ; change this to IP of the server
; server-endpoint     = tcp://127.0.0.1:5555
; publish-endpoint    = udp://239.0.0.1:40000
; ; Note: if publish-rate is 0, then points will be published as fast as possible
; publish-rate        = 0.03

; ; How often to retry connection to RTDS/PMUs if the connections die
; rtds-retry-delay    = 5.0
; ; IP address of the RTDS
; rtds-rack-ip        = 172.24.4.122

; ; Configurations for PMUs configured in RTDS, comma-separated
; ; NOTE: the length of all "rtds-pmu-*" options must match!
; ; TODO: UDP isn't implemented yet in pyPMU, therefore "udp" is not currently working
; ; Allowed values for "rtds-pmu-protocols": tcp, udp
; ; This selects which transport protocol will be used for C37.118
; rtds-pmu-ips        = 172.24.9.51, 172.24.9.51, 172.24.9.51, 172.24.9.51, 172.24.9.51, 172.24.9.51, 172.24.9.51, 172.24.9.51
; rtds-pmu-ports      = 4714, 4716, 4719, 4718, 4717, 4715, 4772, 4782
; rtds-pmu-protocols  = tcp, tcp, tcp, tcp, tcp, tcp, tcp, tcp
; rtds-pmu-names      = PMU1, PMU2, PMU3, PMU4, PMU5, PMU6, PMU7, PMU8
; rtds-pmu-labels     = BUS7, BUS8, BUS9, BUS5, BUS5-1, BUS4, BUS6-1, BUS6
; rtds-pdc-ids        = 41, 6, 91, 92, 71, 72, 5, 6

; ; If CSV files should be saved
; csv-enabled         = False
; ; Path CSV files should be saved to
; csv-file-path       = /root/rtds_data/
; ; Number of rows to save in each CSV file
; csv-rows-per-file   = 50000
; ; Maximum number of CSV files to save. The oldest files will be deleted as new files are created.
; ; Set to 0 for no limit.
; csv-max-files       = 3

; ; If data should be saved to Elasticsearch
; elastic-enabled        = False
; ; Elasticsearch host to save data to
; elastic-host           = http://172.24.24.121:9200
; ; Elasticsearch index name. The datestamp is added to this.
; ; For example, a basename of "rtds" will result in indices
; ; with names like "rtds-2023.06.08".
; elastic-index-basename = rtds-clean

; ; Configuration for connecting to the GTNET-SKT interface on the RTDS
; ; NOTE: this applies to GTNET-SKT channel 1 (multiple GTNET-SKT channels are not supported yet)
; gtnet-skt-ip              = 172.24.9.52
; gtnet-skt-port            = 7000
; ; Allowed protocols: tcp, udp
; gtnet-skt-protocol        = udp
; gtnet-skt-tcp-retry-delay = 1.0
; ; How many writes per second
; gtnet-skt-udp-write-rate  = 30

; ; SCEPTRE/Bennu requires tag names with a format "<name>.<thing>"
; ; - boolean fields (int):  ".closed" ("G3CB3.closed")
; ; - analog fields (float): ".value"  ("DL5shed.value")
; ;
; ; 20 tags total (18 without load shedding)
; gtnet-skt-tag-names = G1CB1.closed, G2CB2.closed, G3CB3.closed, CBL5.closed, CBL6.closed, CBL8.closed, T5SE.closed, T5RE.closed, T6SE.closed, T6RE.closed, T4RE.closed, T4SE.closed, T2RE.closed, T2SE.closed, T1SE.closed, T1RE.closed, T3RE.closed, T3SE.closed, DL5shed.value, DL6shed.value
; ; Data types for the GTNET-SKT tags (allowed types: int, float)
; gtnet-skt-tag-types = int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, float, float
; ; Initial values for the GTNET-SKT tags
; gtnet-skt-initial-values = 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.0, 0.0
